{
  "nodes": [
    {
      "id": "ConnectRobotNode-1752981247094",
      "type": "customNode",
      "position": {
        "x": -85.64319997888809,
        "y": 261.9742281917004
      },
      "data": {
        "label": "Connect Robot",
        "nodeInfo": {
          "name": "ConnectRobotNode",
          "display_name": "Connect Robot",
          "description": "Connect to a robot using ScsServoSDK.connect() and return SDK instance",
          "detailed_description": "\nConnectRobotNode\n\nPurpose: Establishes a connection to a robot using the ScsServoSDK and returns the SDK instance for use by other robot nodes.\n\nInputs:\n  - port_name (STRING): The serial port name to connect to (leave empty for auto-detection)\n\nOutputs:\n  - sdk (ScsServoSDK): The connected SDK instance that can be used by other robot control nodes\n\nUsage: Use this node at the beginning of robot workflows to establish communication. The SDK output should be connected to other robot nodes that require servo control. If port_name is empty, the system will attempt to auto-detect the robot.\n        ",
          "category": "robot",
          "input_types": {
            "required": {
              "port_name": [
                "STRING",
                {
                  "default": ""
                }
              ]
            }
          },
          "return_types": {
            "required": {
              "sdk": [
                "ScsServoSDK",
                {}
              ]
            }
          },
          "function": "connect_robot"
        },
        "type": "ConnectRobotNode",
        "inputValues": {
          "port_name": "/dev/tty.usbmodem5A7A0558831"
        }
      },
      "width": 280,
      "height": 137,
      "selected": false,
      "positionAbsolute": {
        "x": 159.47660885213043,
        "y": 332.0082989099732
      },
      "dragging": false,
      "measured": {
        "width": 280,
        "height": 137
      }
    },
    {
      "id": "SO101RobotStatusReader-1752981261656",
      "type": "customNode",
      "position": {
        "x": 330.02009953611486,
        "y": 210.7662689233171
      },
      "data": {
        "label": "SO101 Robot Status Reader",
        "nodeInfo": {
          "name": "SO101RobotStatusReader",
          "display_name": "SO101 Robot Status Reader",
          "description": "Read status (positions, modes) from connected robot servos using feetech-servo-sdk",
          "detailed_description": "\n            RobotStatusReader Node\n\n            Purpose: Reads status (positions, modes) from connected robot servos using feetech-servo-sdk.\n\n            Inputs:\n              - sdk (ScsServoSDK): The SDK instance for communicating with servos.\n\n            Outputs:\n              - status_data (DICT): Dictionary containing read positions, modes, servo_ids, timestamp, and connection status.\n              - positions (DICT): Dictionary of servo positions keyed by servo ID.\n\n            Features:\n              - Automatically reads positions for servos 1-6\n              - Reads servo modes for each connected servo\n              - Provides timestamp and connection status information\n              - Handles errors gracefully with detailed error messages\n              - Returns both comprehensive status data and positions separately\n\n            Usage:\n              - Connect the ScsServoSDK output from a robot connection node\n              - The node automatically reads from servos 1-6\n              - Use status_data for comprehensive robot state information\n              - Use positions for direct access to servo position values\n              - Monitor connection status and error handling\n            ",
          "tags": [
            "SO101",
            "SO100"
          ],
          "input_types": {
            "required": {
              "sdk": [
                "ScsServoSDK",
                {}
              ]
            },
            "optional": {}
          },
          "return_types": {
            "required": {
              "status_data": [
                "DICT",
                {}
              ],
              "positions": [
                "DICT",
                {}
              ]
            }
          },
          "function": "read_robot_status"
        },
        "type": "SO101RobotStatusReader"
      },
      "measured": {
        "width": 479,
        "height": 138
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "DisplayNode-1752983719616",
      "type": "customNode",
      "position": {
        "x": 358.3816085658397,
        "y": 607.1952657282742
      },
      "data": {
        "label": "Display",
        "nodeInfo": {
          "name": "DisplayNode",
          "display_name": "Display",
          "description": "Display the input value (ANY type) for debugging or monitoring.",
          "detailed_description": "\nDisplayNode\n\nPurpose: Takes any input value and displays it (prints to console). Useful for debugging or monitoring workflow data.\n\nInputs:\n  - value (ANY): Any value to display\n\nOutputs:\n  - value (ANY): The same value that was input, for display purposes\n\nUsage: Use this node to inspect values in your workflow. It prints the value to the backend console and passes it through for display in the UI.\n        ",
          "tags": [
            "Basic"
          ],
          "input_types": {
            "required": {
              "value": [
                "ANY",
                {}
              ]
            }
          },
          "return_types": {},
          "function": "display"
        },
        "type": "DisplayNode",
        "bypassed": false
      },
      "measured": {
        "width": 362,
        "height": 122
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "ThreeDVisualizationNode-1752985141862",
      "type": "threeDNode",
      "position": {
        "x": 1134.902344667754,
        "y": 678.353651015242
      },
      "data": {
        "label": "3D Visualization",
        "nodeInfo": {
          "name": "ThreeDVisualizationNode",
          "display_name": "3D Visualization",
          "description": "Visualize robot positions in 3D by converting motor positions to angles.",
          "detailed_description": "\nThreeDVisualizationNode\n\nPurpose: Takes motor position data and converts it to joint angles for 3D visualization. This node processes motor position data and returns visualization data that can be rendered in a 3D viewer.\n\nInputs:\n  - positions (DICT): Dictionary mapping servo IDs to positions in format:\n    {1: 1510, 2: 1029, 3: 3010, 4: 967, 5: 638, 6: 2039}\n\nOutputs:\n  - None (produces rt_update for 3D visualization)\n\nUsage: Use this node to visualize robot joint states in 3D. Connect it to nodes that provide motor position data to see the 3D representation of the robot's current configuration in the UI.\n        ",
          "tags": [
            "Basic"
          ],
          "input_types": {
            "required": {
              "positions": [
                "DICT",
                {}
              ]
            }
          },
          "return_types": {
            "required": {}
          },
          "function": "visualize_3d"
        },
        "type": "ThreeDVisualizationNode"
      },
      "measured": {
        "width": 500,
        "height": 400
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "ThreeDVisualizationNode-1752985392275",
      "type": "threeDNode",
      "position": {
        "x": 376.99031223501476,
        "y": 898.867481519229
      },
      "data": {
        "label": "3D Visualization",
        "nodeInfo": {
          "name": "ThreeDVisualizationNode",
          "display_name": "3D Visualization",
          "description": "Visualize robot positions in 3D by converting motor positions to angles.",
          "detailed_description": "\nThreeDVisualizationNode\n\nPurpose: Takes motor position data and converts it to joint angles for 3D visualization. This node processes motor position data and returns visualization data that can be rendered in a 3D viewer.\n\nInputs:\n  - positions (DICT): Dictionary mapping servo IDs to positions in format:\n    {1: 1510, 2: 1029, 3: 3010, 4: 967, 5: 638, 6: 2039}\n\nOutputs:\n  - None (produces rt_update for 3D visualization)\n\nUsage: Use this node to visualize robot joint states in 3D. Connect it to nodes that provide motor position data to see the 3D representation of the robot's current configuration in the UI.\n        ",
          "tags": [
            "Basic"
          ],
          "input_types": {
            "required": {
              "positions": [
                "DICT",
                {}
              ]
            }
          },
          "return_types": {
            "required": {}
          },
          "function": "visualize_3d"
        },
        "type": "ThreeDVisualizationNode",
        "bypassed": false
      },
      "measured": {
        "width": 500,
        "height": 400
      },
      "selected": true,
      "dragging": false
    },
    {
      "id": "DisplayNode-1752985414958",
      "type": "customNode",
      "position": {
        "x": 1157.9415627698786,
        "y": 335.9452969882729
      },
      "data": {
        "label": "Display",
        "nodeInfo": {
          "name": "DisplayNode",
          "display_name": "Display",
          "description": "Display the input value (ANY type) for debugging or monitoring.",
          "detailed_description": "\nDisplayNode\n\nPurpose: Takes any input value and displays it (prints to console). Useful for debugging or monitoring workflow data.\n\nInputs:\n  - value (ANY): Any value to display\n\nOutputs:\n  - value (ANY): The same value that was input, for display purposes\n\nUsage: Use this node to inspect values in your workflow. It prints the value to the backend console and passes it through for display in the UI.\n        ",
          "tags": [
            "Basic"
          ],
          "input_types": {
            "required": {
              "value": [
                "ANY",
                {}
              ]
            }
          },
          "return_types": {},
          "function": "display"
        },
        "type": "DisplayNode",
        "bypassed": false
      },
      "measured": {
        "width": 362,
        "height": 122
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "ProxyHttpSenderNode-1752986430006",
      "type": "customNode",
      "position": {
        "x": 1076.405779811138,
        "y": 13.319457546238027
      },
      "data": {
        "label": "Proxy HTTP Sender",
        "nodeInfo": {
          "name": "ProxyHttpSenderNode",
          "display_name": "Proxy HTTP Sender",
          "description": "Send data through HTTP proxy to external clients",
          "detailed_description": "\nProxyHttpSenderNode\n\nPurpose: Sends data through an HTTP proxy URL to external clients. This node makes an HTTP POST request to the specified proxy URL with the input data.\n\nInputs:\n  - data (ANY): The data to send through HTTP (will be JSON serialized)\n  - proxy_url (STRING): The HTTP proxy URL (e.g., https://abc123.proxy.com)\n\nOutputs:\n  - success (BOOLEAN): True if the data was sent successfully, False otherwise\n  - message (STRING): Status message describing the result\n\nUsage: Use this node to send data to external clients through any HTTP proxy service. Make sure your proxy tunnel is running and the URL is correct. The data will be sent as a JSON POST request.\n        ",
          "tags": [
            "Basic"
          ],
          "input_types": {
            "required": {
              "data": [
                "ANY",
                {}
              ],
              "proxy_url": [
                "STRING",
                {
                  "default": "https://your-proxy-url.com"
                }
              ]
            }
          },
          "return_types": {
            "required": {
              "success": [
                "BOOLEAN",
                {}
              ],
              "message": [
                "STRING",
                {}
              ]
            }
          },
          "function": "send_http"
        },
        "type": "ProxyHttpSenderNode",
        "inputValues": {
          "proxy_url": " https://6d1446e16e46.ngrok-free.app/data"
        }
      },
      "measured": {
        "width": 287,
        "height": 246
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "ProxyHttpClientNode-1752986434375",
      "type": "customNode",
      "position": {
        "x": -82.26992899985925,
        "y": 594.8477593768604
      },
      "data": {
        "label": "Proxy HTTP Client",
        "nodeInfo": {
          "name": "ProxyHttpClientNode",
          "display_name": "Proxy HTTP Client",
          "description": "Make HTTP requests to external endpoints through proxy",
          "detailed_description": "\nProxyHttpClientNode\n\nPurpose: Makes HTTP GET requests to external endpoints that can be accessed through proxy tunnels. This node fetches data from the specified URL and returns the response.\n\nInputs:\n  - url (STRING): The full URL to make the HTTP request to (e.g., https://your-proxy-endpoint.com)\n\nOutputs:\n  - response_data (DICT): The response data from the HTTP request (parsed JSON or error info)\n  - status_code (INT): The HTTP status code of the response\n  - success (BOOLEAN): True if the request was successful (status code 200-299), False otherwise\n\nUsage: Use this node to fetch data from external services through proxy tunnels. Provide the full proxy URL and the node will make a GET request and return the response data.\n        ",
          "tags": [
            "Basic"
          ],
          "input_types": {
            "required": {
              "url": [
                "STRING",
                {
                  "default": "https://your-proxy-endpoint.com"
                }
              ]
            }
          },
          "return_types": {
            "required": {
              "response_data": [
                "DICT",
                {}
              ],
              "status_code": [
                "INT",
                {}
              ],
              "success": [
                "BOOLEAN",
                {}
              ]
            }
          },
          "function": "fetch_data"
        },
        "type": "ProxyHttpClientNode",
        "inputValues": {
          "url": "http://localhost:8001/data"
        }
      },
      "measured": {
        "width": 328,
        "height": 264
      },
      "selected": false,
      "dragging": false
    }
  ],
  "edges": [
    {
      "source": "ConnectRobotNode-1752981247094",
      "sourceHandle": "output",
      "target": "SO101RobotStatusReader-1752981261656",
      "targetHandle": "sdk",
      "id": "xy-edge__ConnectRobotNode-1752981247094output-SO101RobotStatusReader-1752981261656sdk",
      "className": ""
    },
    {
      "source": "SO101RobotStatusReader-1752981261656",
      "sourceHandle": "output-1",
      "target": "ThreeDVisualizationNode-1752985141862",
      "targetHandle": "positions",
      "id": "xy-edge__SO101RobotStatusReader-1752981261656output-1-ThreeDVisualizationNode-1752985141862positions",
      "className": ""
    },
    {
      "source": "SO101RobotStatusReader-1752981261656",
      "sourceHandle": "output-1",
      "target": "DisplayNode-1752985414958",
      "targetHandle": "value",
      "id": "xy-edge__SO101RobotStatusReader-1752981261656output-1-DisplayNode-1752985414958value",
      "className": ""
    },
    {
      "source": "SO101RobotStatusReader-1752981261656",
      "sourceHandle": "output-1",
      "target": "ProxyHttpSenderNode-1752986430006",
      "targetHandle": "data",
      "id": "xy-edge__SO101RobotStatusReader-1752981261656output-1-ProxyHttpSenderNode-1752986430006data",
      "className": ""
    },
    {
      "source": "ProxyHttpClientNode-1752986434375",
      "sourceHandle": "output-0",
      "target": "DisplayNode-1752983719616",
      "targetHandle": "value",
      "id": "xy-edge__ProxyHttpClientNode-1752986434375output-0-DisplayNode-1752983719616value",
      "className": ""
    },
    {
      "source": "ProxyHttpClientNode-1752986434375",
      "sourceHandle": "output-0",
      "target": "ThreeDVisualizationNode-1752985392275",
      "targetHandle": "positions",
      "id": "xy-edge__ProxyHttpClientNode-1752986434375output-0-ThreeDVisualizationNode-1752985392275positions",
      "className": ""
    }
  ],
  "metadata": {
    "name": "teleoperation_through_ngrok",
    "description": "Auto-saved on 7/20/2025",
    "created": "2025-07-20T21:48:00.353Z",
    "version": "1.0.0"
  }
}