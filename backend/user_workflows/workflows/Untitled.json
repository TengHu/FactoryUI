{
  "nodes": [
    {
      "id": "ConnectRobotNode-1752694507773",
      "type": "customNode",
      "position": {
        "x": 112.138613510547,
        "y": 22.83235753220592
      },
      "data": {
        "label": "Connect Robot",
        "nodeInfo": {
          "name": "ConnectRobotNode",
          "display_name": "Connect Robot",
          "description": "Connect to a robot using ScsServoSDK.connect() and return SDK instance",
          "detailed_description": "\nConnectRobotNode\n\nPurpose: Establishes a connection to a robot using the ScsServoSDK and returns the SDK instance for use by other robot nodes.\n\nInputs:\n  - port_name (STRING): The serial port name to connect to (leave empty for auto-detection)\n\nOutputs:\n  - sdk (ScsServoSDK): The connected SDK instance that can be used by other robot control nodes\n\nUsage: Use this node at the beginning of robot workflows to establish communication. The SDK output should be connected to other robot nodes that require servo control. If port_name is empty, the system will attempt to auto-detect the robot.\n        ",
          "category": "robot",
          "input_types": {
            "required": {
              "port_name": [
                "STRING",
                {
                  "default": ""
                }
              ]
            }
          },
          "return_types": {
            "required": {
              "sdk": [
                "ScsServoSDK",
                {}
              ]
            }
          },
          "function": "connect_robot"
        },
        "type": "ConnectRobotNode",
        "inputValues": {
          "port_name": "/dev/tty.usbmodem5A7A0558831"
        }
      },
      "width": 280,
      "height": 137,
      "selected": false,
      "positionAbsolute": {
        "x": 159.47660885213043,
        "y": 332.0082989099732
      },
      "dragging": false,
      "measured": {
        "width": 280,
        "height": 137
      }
    },
    {
      "id": "SO101RobotStatusReader-1752975092612",
      "type": "customNode",
      "position": {
        "x": 481.42206400594074,
        "y": 36.663323736185994
      },
      "data": {
        "label": "SO101 Robot Status Reader",
        "nodeInfo": {
          "name": "SO101RobotStatusReader",
          "display_name": "SO101 Robot Status Reader",
          "description": "Read status (positions, modes) from connected robot servos using feetech-servo-sdk",
          "detailed_description": "\n            RobotStatusReader Node\n\n            Purpose: Reads status (positions, modes) from connected robot servos using feetech-servo-sdk.\n\n            Inputs:\n              - sdk (ScsServoSDK): The SDK instance for communicating with servos.\n\n            Outputs:\n              - status_data (DICT): Dictionary containing read positions, modes, servo_ids, timestamp, and connection status.\n              - positions (DICT): Dictionary of servo positions keyed by servo ID.\n\n            Features:\n              - Automatically reads positions for servos 1-6\n              - Reads servo modes for each connected servo\n              - Provides timestamp and connection status information\n              - Handles errors gracefully with detailed error messages\n              - Returns both comprehensive status data and positions separately\n\n            Usage:\n              - Connect the ScsServoSDK output from a robot connection node\n              - The node automatically reads from servos 1-6\n              - Use status_data for comprehensive robot state information\n              - Use positions for direct access to servo position values\n              - Monitor connection status and error handling\n            ",
          "tags": [
            "SO101",
            "SO100"
          ],
          "input_types": {
            "required": {
              "sdk": [
                "ScsServoSDK",
                {}
              ]
            },
            "optional": {}
          },
          "return_types": {
            "required": {
              "status_data": [
                "DICT",
                {}
              ],
              "positions": [
                "DICT",
                {}
              ]
            }
          },
          "function": "read_robot_status"
        },
        "type": "SO101RobotStatusReader"
      },
      "measured": {
        "width": 479,
        "height": 138
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "NgrokHttpSenderNode-1752976762551",
      "type": "customNode",
      "position": {
        "x": 1019.7865616857641,
        "y": 75.89988836754824
      },
      "data": {
        "label": "Ngrok HTTP Sender",
        "nodeInfo": {
          "name": "NgrokHttpSenderNode",
          "display_name": "Ngrok HTTP Sender",
          "description": "Send data through ngrok HTTP to external clients",
          "detailed_description": "\nNgrokHttpSenderNode\n\nPurpose: Sends data through a ngrok HTTP URL to external clients. This node makes an HTTP POST request to the specified ngrok URL with the input data.\n\nInputs:\n  - data (ANY): The data to send through HTTP (will be JSON serialized)\n  - ngrok_url (STRING): The ngrok HTTP URL (e.g., https://abc123.ngrok.io)\n\nOutputs:\n  - success (BOOLEAN): True if the data was sent successfully, False otherwise\n  - message (STRING): Status message describing the result\n\nUsage: Use this node to send data to external clients through ngrok. Make sure your ngrok tunnel is running and the URL is correct. The data will be sent as a JSON POST request.\n        ",
          "tags": [
            "Basic"
          ],
          "input_types": {
            "required": {
              "data": [
                "ANY",
                {}
              ],
              "ngrok_url": [
                "STRING",
                {
                  "default": "https://your-ngrok-url.ngrok.io"
                }
              ]
            }
          },
          "return_types": {
            "required": {
              "success": [
                "BOOLEAN",
                {}
              ],
              "message": [
                "STRING",
                {}
              ]
            }
          },
          "function": "send_http"
        },
        "type": "NgrokHttpSenderNode"
      },
      "measured": {
        "width": 287,
        "height": 232
      },
      "selected": true,
      "dragging": false
    }
  ],
  "edges": [
    {
      "source": "ConnectRobotNode-1752694507773",
      "sourceHandle": "output",
      "target": "SO101RobotStatusReader-1752975092612",
      "targetHandle": "sdk",
      "id": "xy-edge__ConnectRobotNode-1752694507773output-SO101RobotStatusReader-1752975092612sdk",
      "className": ""
    },
    {
      "source": "SO101RobotStatusReader-1752975092612",
      "sourceHandle": "output-1",
      "target": "NgrokHttpSenderNode-1752976762551",
      "targetHandle": "data",
      "id": "xy-edge__SO101RobotStatusReader-1752975092612output-1-NgrokHttpSenderNode-1752976762551data",
      "className": ""
    }
  ],
  "metadata": {
    "name": "Untitled",
    "description": "Auto-saved on 7/19/2025",
    "created": "2025-07-20T02:43:46.712Z",
    "version": "1.0.0"
  }
}