{
  "nodes": [
    {
      "id": "ConnectRobotNode-1752694258308",
      "type": "customNode",
      "position": {
        "x": -154.30530768743614,
        "y": 228.1063287492885
      },
      "data": {
        "label": "Connect Robot",
        "nodeInfo": {
          "name": "ConnectRobotNode",
          "display_name": "Connect Robot",
          "description": "Connect to a robot using ScsServoSDK.connect() and return SDK instance",
          "detailed_description": "\nConnectRobotNode\n\nPurpose: Establishes a connection to a robot using the ScsServoSDK and returns the SDK instance for use by other robot nodes.\n\nInputs:\n  - port_name (STRING): The serial port name to connect to (leave empty for auto-detection)\n\nOutputs:\n  - sdk (ScsServoSDK): The connected SDK instance that can be used by other robot control nodes\n\nUsage: Use this node at the beginning of robot workflows to establish communication. The SDK output should be connected to other robot nodes that require servo control. If port_name is empty, the system will attempt to auto-detect the robot.\n        ",
          "category": "robot",
          "input_types": {
            "required": {
              "port_name": [
                "STRING",
                {
                  "default": ""
                }
              ]
            }
          },
          "return_types": {
            "required": {
              "sdk": [
                "ScsServoSDK",
                {}
              ]
            }
          },
          "function": "connect_robot"
        },
        "type": "ConnectRobotNode",
        "inputValues": {
          "port_name": "/dev/tty.usbmodem5A7A0558831"
        }
      },
      "width": 280,
      "height": 137,
      "selected": true,
      "positionAbsolute": {
        "x": 38.9472161517557,
        "y": 228.1063287492885
      },
      "dragging": false,
      "measured": {
        "width": 280,
        "height": 137
      }
    },
    {
      "id": "Grok4Node-1752694263993",
      "type": "customNode",
      "position": {
        "x": -162.27285880555627,
        "y": 531.6554218179194
      },
      "data": {
        "label": "Grok4 LLM Node",
        "nodeInfo": {
          "name": "Grok4Node",
          "display_name": "Grok4 LLM Node",
          "description": "Call Grok4 LLM with a system prompt and instruction, return a position dict.",
          "detailed_description": "\n            Grok4Node\n\n            Purpose: Calls the Grok4 LLM API with a system prompt and instruction, and returns a dict of positions.\n\n            Inputs:\n              - system_prompt (STRING): The system prompt for the LLM.\n              - instruction (STRING): The user instruction for the LLM.\n\n            Outputs:\n              - positions (DICT): The parsed position dictionary from the LLM response.\n\n            Usage:\n              - Use this node to generate robot arm positions from natural language instructions using Grok4.\n            ",
          "category": "processing",
          "input_types": {
            "required": {
              "system_prompt": [
                "STRING",
                {
                  "default": "You are a robot arm controller."
                }
              ],
              "instruction": [
                "STRING",
                {
                  "default": "Move to home position."
                }
              ]
            }
          },
          "return_types": {
            "required": {
              "positions": [
                "DICT",
                {}
              ]
            }
          },
          "function": "call_grok4"
        },
        "type": "Grok4Node",
        "inputValues": {
          "system_prompt": "You can help control the so-arm100 robot by pressing keyboard keys. Use the keyPress tool to simulate key presses. Each key will be held down for 1 second by default. If the user describes roughly wanting to make it longer or shorter, adjust the duration accordingly.     The robot can be controlled with the following keys:     - \"q\" and \"1\" for rotate the bot to left and right     - \"i\" and \"8\" for moving the bot/jaw down(\"i\") and up(\"8\")     - \"u\" and \"o\" for moving the bot/jaw backward(\"u\") and forward(\"o\")     - \"6\" to open the jaw and \"y\" to close the jaw     - \"t\" and \"5\" for rotating jaw     ",
          "instruction": "move jaw around"
        },
        "bypassed": false
      },
      "width": 280,
      "height": 269,
      "selected": false,
      "positionAbsolute": {
        "x": 33.90773357665364,
        "y": 461.38177678548607
      },
      "dragging": false,
      "measured": {
        "width": 280,
        "height": 269
      }
    },
    {
      "id": "RobotStatusReader-1752694273476",
      "type": "customNode",
      "position": {
        "x": 507.7753018275233,
        "y": 238.68557892323332
      },
      "data": {
        "label": "Robot Status Reader",
        "nodeInfo": {
          "name": "RobotStatusReader",
          "display_name": "Robot Status Reader",
          "description": "Read status (positions, modes) from connected robot servos using feetech-servo-sdk",
          "detailed_description": "\n            RobotStatusReader Node\n\n            Purpose: Reads status (positions, modes) from connected robot servos using feetech-servo-sdk with real-time streaming support.\n\n            Inputs:\n              - sdk (ScsServoSDK): The SDK instance for communicating with servos.\n              - servo_ids (STRING): Comma-separated list of servo IDs to read (e.g., '1,2,3,4,5').\n              - read_positions (BOOLEAN, optional): Whether to read servo positions (default: True).\n              - read_modes (BOOLEAN, optional): Whether to read servo modes (default: False).\n              - stream_results (BOOLEAN, optional): Enable real-time streaming to frontend (default: True).\n              - update_interval (FLOAT, optional): Time between updates in seconds (default: 0.1, range: 0.01-5.0).\n\n            Outputs:\n              - status_data (DICT): Dictionary containing read positions, modes (if requested), servo_ids, timestamp, and connection status.\n              - positions (DICT): Dictionary of servo positions keyed by servo ID.\n\n            Real-time Features:\n              - When stream_results is enabled, robot status is continuously broadcast to the frontend\n              - The node displays live servo positions and modes in the UI\n              - Update frequency is configurable via update_interval\n              - Streaming runs for a maximum of 10 seconds per execution\n              - Real-time indicators show streaming status (Live, Complete, Error)\n\n            Usage:\n              - Connect the ScsServoSDK output from a robot connection node\n              - Specify servo IDs to monitor (e.g., \"1,2,3,4,5,6\")\n              - Enable streaming for real-time monitoring\n              - Adjust update_interval for performance vs. responsiveness balance\n              - Monitor the node UI for live robot status updates\n            ",
          "category": "robot",
          "input_types": {
            "required": {
              "sdk": [
                "ScsServoSDK",
                {}
              ],
              "servo_ids": [
                "STRING",
                {
                  "default": "1,2,3,4,5"
                }
              ]
            },
            "optional": {
              "read_positions": [
                "BOOLEAN",
                {
                  "default": true
                }
              ],
              "read_modes": [
                "BOOLEAN",
                {
                  "default": false
                }
              ],
              "stream_results": [
                "BOOLEAN",
                {
                  "default": true
                }
              ],
              "update_interval": [
                "FLOAT",
                {
                  "default": 0.1,
                  "min": 0.01,
                  "max": 5
                }
              ]
            }
          },
          "return_types": {
            "required": {
              "status_data": [
                "DICT",
                {}
              ],
              "positions": [
                "DICT",
                {}
              ]
            }
          },
          "function": "read_robot_status"
        },
        "type": "RobotStatusReader",
        "inputValues": {
          "servo_ids": "1,2,3,4,5,6"
        }
      },
      "width": 280,
      "height": 454,
      "selected": false,
      "positionAbsolute": {
        "x": 507.7753018275233,
        "y": 238.68557892323332
      },
      "dragging": false,
      "measured": {
        "width": 280,
        "height": 454
      }
    },
    {
      "id": "So101WritePositionNode-1752694285304",
      "type": "customNode",
      "position": {
        "x": 504.9703455611534,
        "y": 813.1926745467154
      },
      "data": {
        "label": "SO101 Write Position",
        "nodeInfo": {
          "name": "So101WritePositionNode",
          "display_name": "SO101 Write Position",
          "description": "Write multiple servo positions to the robot using ScsServoSDK.",
          "detailed_description": "\n            So101WritePositionNode Node\n\n\"\n            \"Purpose: Writes multiple servo positions to the robot using ScsServoSDK.\n\"\n            \"Inputs:\n\"\n            \"  - sdk (ScsServoSDK): The SDK instance for communicating with servos.\n\"\n            \"  - positions (DICT): Dictionary mapping servo IDs to target positions.\n\"\n            \"Outputs:\n\"\n            \"  - write_result (DICT): Dictionary reflecting the positions written to the servos.\n\"\n            ",
          "category": "robot",
          "input_types": {
            "required": {
              "sdk": [
                "ScsServoSDK",
                {}
              ],
              "positions": [
                "DICT",
                {}
              ]
            },
            "optional": {}
          },
          "return_types": {
            "required": {
              "write_result": [
                "DICT",
                {}
              ]
            }
          },
          "function": "write_positions"
        },
        "type": "So101WritePositionNode"
      },
      "width": 280,
      "height": 158,
      "selected": false,
      "positionAbsolute": {
        "x": 504.9703455611534,
        "y": 813.1926745467154
      },
      "dragging": false,
      "measured": {
        "width": 280,
        "height": 158
      }
    },
    {
      "id": "SO101JointAnglesToPositions-1752694529182",
      "type": "customNode",
      "position": {
        "x": -120.51618246276328,
        "y": 894.6031070503168
      },
      "data": {
        "label": "SO-101 Joint Angles to Positions",
        "nodeInfo": {
          "name": "SO101JointAnglesToPositions",
          "display_name": "SO-101 Joint Angles to Positions",
          "description": "Convert joint angles to servo positions for the SO-101 robot",
          "detailed_description": "\n            \n            ",
          "category": "robot",
          "input_types": {
            "required": {
              "rotation": [
                "FLOAT",
                {
                  "default": 0,
                  "min": -180,
                  "max": 180
                }
              ],
              "pitch": [
                "FLOAT",
                {
                  "default": 0,
                  "min": -90,
                  "max": 90
                }
              ],
              "elbow": [
                "FLOAT",
                {
                  "default": 0,
                  "min": -120,
                  "max": 120
                }
              ],
              "wrist_pitch": [
                "FLOAT",
                {
                  "default": 0,
                  "min": -90,
                  "max": 90
                }
              ],
              "wrist_roll": [
                "FLOAT",
                {
                  "default": 0,
                  "min": -180,
                  "max": 180
                }
              ],
              "jaw": [
                "FLOAT",
                {
                  "default": 0,
                  "min": 0,
                  "max": 90
                }
              ]
            },
            "optional": {}
          },
          "return_types": {
            "required": {
              "positions": [
                "DICT",
                {}
              ]
            }
          },
          "function": "angles_to_positions"
        },
        "type": "SO101JointAnglesToPositions",
        "inputValues": {
          "rotation": "180",
          "pitch": "180",
          "elbow": "180",
          "wrist_pitch": "180",
          "wrist_roll": "180",
          "jaw": "180"
        },
        "bypassed": true
      },
      "width": 280,
      "height": 392,
      "selected": false,
      "positionAbsolute": {
        "x": 27.351278959648653,
        "y": 808.225085031284
      },
      "dragging": false,
      "measured": {
        "width": 280,
        "height": 392
      }
    },
    {
      "id": "PrintToConsoleNode-1752694639370",
      "type": "customNode",
      "position": {
        "x": 927.0359124599985,
        "y": 814.8633003154621
      },
      "data": {
        "label": "Print To Console",
        "nodeInfo": {
          "name": "PrintToConsoleNode",
          "display_name": "Print To Console",
          "description": "Prints the input value to the console.",
          "detailed_description": "\nPrintToConsoleNode\n\nPurpose: Prints any input value to the console for debugging and monitoring purposes.\n\nInputs:\n  - value (ANY): Any value to print to the console\n\nOutputs:\n  - None (this node has no outputs)\n\nUsage: Use this node to debug your workflow by printing intermediate values to the console. Place it anywhere in your workflow to see what data is flowing through.\n        ",
          "category": "processing",
          "input_types": {
            "required": {
              "value": [
                "ANY",
                {}
              ]
            }
          },
          "return_types": {},
          "function": "execute"
        },
        "type": "PrintToConsoleNode",
        "bypassed": true
      },
      "width": 249,
      "height": 122,
      "selected": false,
      "positionAbsolute": {
        "x": 927.0359124599985,
        "y": 814.8633003154621
      },
      "dragging": false,
      "measured": {
        "width": 249,
        "height": 122
      }
    },
    {
      "id": "PrintToConsoleNode-1752694795308",
      "type": "customNode",
      "position": {
        "x": 874.3680790399463,
        "y": 376.3060240407315
      },
      "data": {
        "label": "Print To Console",
        "nodeInfo": {
          "name": "PrintToConsoleNode",
          "display_name": "Print To Console",
          "description": "Prints the input value to the console.",
          "detailed_description": "\nPrintToConsoleNode\n\nPurpose: Prints any input value to the console for debugging and monitoring purposes.\n\nInputs:\n  - value (ANY): Any value to print to the console\n\nOutputs:\n  - None (this node has no outputs)\n\nUsage: Use this node to debug your workflow by printing intermediate values to the console. Place it anywhere in your workflow to see what data is flowing through.\n        ",
          "category": "processing",
          "input_types": {
            "required": {
              "value": [
                "ANY",
                {}
              ]
            }
          },
          "return_types": {},
          "function": "execute"
        },
        "type": "PrintToConsoleNode",
        "bypassed": false
      },
      "width": 249,
      "height": 122,
      "selected": false,
      "positionAbsolute": {
        "x": 874.3680790399463,
        "y": 376.3060240407315
      },
      "dragging": false,
      "measured": {
        "width": 249,
        "height": 122
      }
    }
  ],
  "edges": [
    {
      "source": "ConnectRobotNode-1752694258308",
      "sourceHandle": "output",
      "target": "RobotStatusReader-1752694273476",
      "targetHandle": "sdk",
      "id": "reactflow__edge-ConnectRobotNode-1752694258308output-RobotStatusReader-1752694273476sdk"
    },
    {
      "source": "Grok4Node-1752694263993",
      "sourceHandle": "output",
      "target": "So101WritePositionNode-1752694285304",
      "targetHandle": "positions",
      "id": "reactflow__edge-Grok4Node-1752694263993output-So101WritePositionNode-1752694285304positions"
    },
    {
      "source": "ConnectRobotNode-1752694258308",
      "sourceHandle": "output",
      "target": "So101WritePositionNode-1752694285304",
      "targetHandle": "sdk",
      "id": "reactflow__edge-ConnectRobotNode-1752694258308output-So101WritePositionNode-1752694285304sdk"
    },
    {
      "source": "SO101JointAnglesToPositions-1752694529182",
      "sourceHandle": "output",
      "target": "So101WritePositionNode-1752694285304",
      "targetHandle": "positions",
      "id": "reactflow__edge-SO101JointAnglesToPositions-1752694529182output-So101WritePositionNode-1752694285304positions"
    },
    {
      "source": "So101WritePositionNode-1752694285304",
      "sourceHandle": "output",
      "target": "PrintToConsoleNode-1752694639370",
      "targetHandle": "value",
      "id": "reactflow__edge-So101WritePositionNode-1752694285304output-PrintToConsoleNode-1752694639370value"
    },
    {
      "source": "RobotStatusReader-1752694273476",
      "sourceHandle": "output-1",
      "target": "PrintToConsoleNode-1752694795308",
      "targetHandle": "value",
      "id": "reactflow__edge-RobotStatusReader-1752694273476output-1-PrintToConsoleNode-1752694795308value"
    }
  ],
  "metadata": {
    "name": "grok1",
    "description": "Auto-saved on 7/19/2025",
    "created": "2025-07-19T21:49:10.537Z",
    "version": "1.0.0"
  }
}